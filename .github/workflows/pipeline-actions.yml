name: Build & Test WebGoat
on:
    workflow_call: #llamada para poder ser usado en otros repositorios
      inputs:
        java-v:
          description: "Java Version Required" #es obligatorio que se introduzca como parámetro la versión de java requerida
          required: true
          type: string
        web_name:
          description: "Web Name" #es obligatorio que se introduzca como parámetro la versión de java requerida
          required: true
          type: string
      secrets:
        SEMGREP_APP_TOKEN:
          description: "SemGrep Token Required"
          required: true
        DOCKER_PASSWORD:
          required: true
        DOCKER_USERNAME:
          required: true


jobs:
    sast:
        name: "SAST - Semgrep"
        runs-on: ubuntu-latest
        steps:
          - name: "Checkout Code"
            run: git clone https://github.com/${{ github.repository }}.git . #clonamos el repositorio que queremos construir aquí, y evitamos el uso de actions/checkout@v4
          - name: "Run Semgrep"
            run: |
              docker run -v $(pwd):/src semgrep/semgrep semgrep ci --config=p/security-audit 
            continue-on-error: true

    sca:
        name: "SCA - OWASP Dependency-Check"
        runs-on: ubuntu-latest
        needs: sast
        steps:
          - name: "Checkout Code"
            run: git clone https://github.com/${{ github.repository }}.git .
    
          - name: "Run OWASP Dependency-Check"
            run: |
                docker run --rm -v $(pwd):/src owasp/dependency-check-action --scan /src --out /src/dependency-check-report.html
            continue-on-error: false

    build:
        name: "Build"
        runs-on: ubuntu-latest
        needs: sca
        steps:
            - name: "Checkout Code"
              run: git clone https://github.com/${{ github.repository }}.git . #clonamos el repositorio que queremos construir aquí, y evitamos el uso de actions/checkout@v4

            - name: "Setup Java"
              uses: actions/setup-java@v4.2.1
              with:
                  distribution: 'temurin'
                  java-version: 23
                  architecture: x64
                  cache: 'maven'

            - name: "Build with Maven"
              run: ./mvnw clean install #Construir la aplicación
              continue-on-error: false #Si falla, se detiene el pipeline

            - name: "Verificar si existe la carpeta target"
              run: ls -l target  # Verificar si la carpeta 'target' existe

            - name: "Build Docker Image"
              run: docker build -t webgoat .

            - name: "Save Docker Image"
              run: docker save webgoat | gzip > /tmp/webgoat.tar.gz

    test:
        name: "Test"
        runs-on: ubuntu-latest
        needs: build #El job sólo se ejecutará si build fue correctamente ejecutado
        steps:
            - name: "Checkout Code"
              run: git clone https://github.com/${{ github.repository }}.git .

            - name: "Setup Java"
              uses: actions/setup-java@v4.2.1
              with:
                  distribution: 'temurin'
                  java-version: ${{ inputs.java-v }}
                  architecture: x64
                  cache: 'maven'

            - name: "Run Tests with Maven"
              run: ./mvnw test #Para ejecutar las pruebas unitarias
              continue-on-error: false
    deploy:
      name: "Deploy WebGoat"
      runs-on: ubuntu-latest
      needs: test
      steps:
        - name: "Checkout Code"
          run: git clone https://github.com/${{ github.repository }}.git .
          
        - name: "Build Docker Image"
          run: docker build -t ${{ inputs.web_name }} .

        - name: "Login to Docker Hub"
          run: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
        
        - name: "Push Docker Image to Docker Hub"
          run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.web_name }}  
        
    dast:
      name: "DAST - OWASP ZAP"
      runs-on: ubuntu-latest
      needs: deploy
      steps:
        - name: "Checkout Code"
          run: git clone https://github.com/${{ github.repository }}.git .
        
        - name: "Run WebGoat Docker Container"
          run: |
            # Ejecutar WebGoat en segundo plano
            docker run -d -p 8080:8080 -p 9090:9090 ${{ secrets.DOCKER_USERNAME }}/${{ inputs.web_name }}         
        
        - name: "Run OWASP ZAP"
          run: |
           sleep 10 
           docker run --user root -v $(pwd):/zap/wrk/:rw --network="host" zaproxy/zap-stable zap-baseline.py -t https://localhost:8080 -r scan-report.html
          continue-on-error: false

        - name: "Stop WebGoat Docker Container"
          run: |
            # Detener el contenedor de WebGoat después de la ejecución de ZAP
            docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/${{ inputs.web_name }}" | xargs docker stop

    secrets-scan:
        name: "Secrets Scan - TruffleHog"
        runs-on: ubuntu-latest
        needs: dast
        steps:
        - name: "Checkout Code"
          run: git clone https://github.com/${{ github.repository }}.git .
            
        - name: "Run TruffleHog"
          run: |
            docker run --rm -v $(pwd):/src trufflesecurity/trufflehog:latest github --repo https://github.com/${{ github.repository }} --debug
          continue-on-error: false
            